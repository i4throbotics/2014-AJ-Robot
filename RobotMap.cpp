// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
SpeedController* RobotMap::chassisbackLeft = NULL;
SpeedController* RobotMap::chassisbackRight = NULL;
SpeedController* RobotMap::chassisfrontLeft = NULL;
SpeedController* RobotMap::chassisfrontRight = NULL;
RobotDrive* RobotMap::chassischassisDrive = NULL;
Encoder* RobotMap::frontLotusfrontLotusEncoder = NULL;
SpeedController* RobotMap::frontLotusfrontLotusMotor = NULL;
Encoder* RobotMap::sideLotussideLotusEncoder = NULL;
Relay* RobotMap::sideLotussideLotusRelay = NULL;
SpeedController* RobotMap::pincerspincerLeft = NULL;
SpeedController* RobotMap::pincerspincerRight = NULL;
RobotDrive* RobotMap::pincerspincerDrive = NULL;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();

	chassisbackLeft = new Talon(3);
	lw->AddActuator("Chassis", "backLeft", (Talon*) chassisbackLeft);
	
	chassisbackRight = new Talon(1);
	lw->AddActuator("Chassis", "backRight", (Talon*) chassisbackRight);
	
	chassisfrontLeft = new Talon(4);
	lw->AddActuator("Chassis", "frontLeft", (Talon*) chassisfrontLeft);
	
	chassisfrontRight = new Talon(2);
	lw->AddActuator("Chassis", "frontRight", (Talon*) chassisfrontRight);
	
	chassischassisDrive = new RobotDrive(chassisfrontLeft, chassisbackLeft,
              chassisfrontRight, chassisbackRight);
	
	chassischassisDrive->SetSafetyEnabled(true);
        chassischassisDrive->SetExpiration(0.1);
        chassischassisDrive->SetSensitivity(0.5);
        chassischassisDrive->SetMaxOutput(1.0);

	frontLotusfrontLotusEncoder = new Encoder(1, 2, false, Encoder::k4X);
	lw->AddSensor("FrontLotus", "frontLotusEncoder", frontLotusfrontLotusEncoder);
	frontLotusfrontLotusEncoder->SetDistancePerPulse(1.0);
        frontLotusfrontLotusEncoder->SetPIDSourceParameter(Encoder::kRate);
	frontLotusfrontLotusMotor = new Victor(7);
	lw->AddActuator("FrontLotus", "frontLotusMotor", (Victor*) frontLotusfrontLotusMotor);
	
	sideLotussideLotusEncoder = new Encoder(5, 6, false, Encoder::k4X);
	lw->AddSensor("SideLotus", "sideLotusEncoder", sideLotussideLotusEncoder);
	sideLotussideLotusEncoder->SetDistancePerPulse(1.0);
        sideLotussideLotusEncoder->SetPIDSourceParameter(Encoder::kRate);
	sideLotussideLotusRelay = new Relay(3);
	lw->AddActuator("SideLotus", "sideLotusRelay", sideLotussideLotusRelay);
	
	pincerspincerLeft = new Talon(5);
	lw->AddActuator("Pincers", "pincerLeft", (Talon*) pincerspincerLeft);
	
	pincerspincerRight = new Talon(6);
	lw->AddActuator("Pincers", "pincerRight", (Talon*) pincerspincerRight);
	
	pincerspincerDrive = new RobotDrive(pincerspincerLeft, pincerspincerRight);
	
	pincerspincerDrive->SetSafetyEnabled(true);
        pincerspincerDrive->SetExpiration(0.1);
        pincerspincerDrive->SetSensitivity(0.5);
        pincerspincerDrive->SetMaxOutput(1.0);
        


	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
